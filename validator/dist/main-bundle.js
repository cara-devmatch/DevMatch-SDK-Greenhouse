var mylib;(()=>{"use strict";var e={679:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ProblemPrerequisitesResult=t.ProblemOpenedResult=t.ProblemOpenedMetadata=t.ProblemInputType=t.ProblemConfiguration=t.EvaluatedTestCase=t.CodeReviewTestCase=t.ProblemTestCase=t.User=void 0,t.User=class{id;name;role;email;github;last_login;last_login_pretty};class n{id;description;hint;maxPoints;constructor(e){Object.assign(this,e)}}var a;t.ProblemTestCase=n,t.CodeReviewTestCase=class extends n{newFileCommentLine;constructor(e){super(e),Object.assign(this,e)}},t.EvaluatedTestCase=class extends n{actualPoints=0;solved=!1;verdictHint="";constructor(e){super(e)}},t.ProblemConfiguration=class{inputType=a.GitRepo;ideEnabled=!1},function(e){e[e.GitRepo=0]="GitRepo",e[e.Url=1]="Url",e[e.CodeReview=2]="CodeReview"}(a=t.ProblemInputType||(t.ProblemInputType={})),t.ProblemOpenedMetadata=class{databag};class s{opened;databag;instructions;static OK;static{this.OK=new s,this.OK.opened=!0}constructor(){this.opened=!1,this.databag=new Map}}t.ProblemOpenedResult=s,t.ProblemPrerequisitesResult=class{opened;message;constructor(e,t=null){this.opened=e,this.message=t}}},788:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Validator=void 0;const s=n(679),i=a(n(147));t.Validator=class{githubPlugin;unzipPlugin;logger;gitServer;storagePlugin;devopsClient;constructor(e,t,n,a,s,i){this.githubPlugin=e,this.unzipPlugin=t,this.logger=n,this.gitServer=a,this.storagePlugin=s,this.devopsClient=i}async getTestCases(){return Promise.resolve([new s.CodeReviewTestCase({id:"SELLING_SOLD_PLANTS",description:"The new plant selling endpoint does not consider what happens when we try to sell a plant we have already sold.",maxPoints:100,newFileCommentLine:-1})])}async prerequesites(e){return Promise.resolve(new s.ProblemPrerequisitesResult(!0))}async getProblemStatement(e){return Promise.resolve("# The Greenhouse\n\nYour friends own a large greenhouse, and recently set up some great technology that can care for plants at the push of a button! They have put together an API so they can interact with their new technology from afar using Python's FastAPI framework and SQL. You've been assigned to review a recent pull request to the API that modifies some core functionality.\n\n# The Database\n\n## plants table\n\nPlants have an `id (primary key)`, `name (varchar)` (your friends treat their plants like family), `species (varchar)`, `sell_price (float)`, and `watering_interval_days (int)` (which indicates how often that plant need watered).\n\n## watering_events table\n\nThis table keeps track of when plants were last watered. A watering event has a `plant_id (foreign key to plant's id)` and an `event_date (datetime)`.\n\n## sales_events table\n\nThis table keeps track of when plants were sold. a sales event has a `plant_id (foreign key to plant's id)`, a `customer_name (varchar)`, and an `event_date (datetime)`.\n\nSold plants do not need watered anymore because they are no longer in the greenhouse.\n\n# Changes For Review\n\nSelling plants is a new operation for your friends, so the `sell_price` field on the `plants` table is a new column. Existing endpoints need to reflect this change, and a new endpoint was added to initate a sales event.\n\nReview the changes made, providing feedback on this pull request including readability, maintainability, and considering edge cases in inputs.\n")}async getProblemConfiguration(){let e=new s.ProblemConfiguration;return e.inputType=s.ProblemInputType.CodeReview,Promise.resolve(e)}async openProblem(e){let t=new s.ProblemOpenedResult;t.databag.set("repoUrl","https://github.com/cara-devmatch/Greenhouse-Code");const n=await this.githubPlugin.downloadZipballArchive("cara-devmatch","Greenhouse-Code","main");return this.unzipPlugin.unzipArrayBufferAndSave(n,"."),i.default.readdir(".",((e,t)=>{if(e)throw e;t.forEach((e=>{console.log(e)}))})),t.opened=!0,t.databag.set("date",(new Date).getTime().toString()),Promise.resolve(t)}async validate(e,t,n,a,s){for(let e of n)e.actualPoints=e.maxPoints,e.hint="here is a hint from the problem for case "+e.id,e.solved=!0;return Promise.resolve(n)}}},147:e=>{e.exports=require("fs")}},t={},n=function n(a){var s=t[a];if(void 0!==s)return s.exports;var i=t[a]={exports:{}};return e[a].call(i.exports,i,i.exports,n),i.exports}(788);mylib=n})();
//# sourceMappingURL=main-bundle.js.map