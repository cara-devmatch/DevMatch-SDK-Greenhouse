var mylib;(()=>{"use strict";var e={679:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ProblemPrerequisitesResult=t.ProblemOpenedResult=t.ProblemOpenedMetadata=t.ProblemInputType=t.ProblemConfiguration=t.EvaluatedTestCase=t.CodeReviewTestCase=t.ProblemTestCase=t.User=void 0,t.User=class{id;name;role;email;github;last_login;last_login_pretty};class n{id;description;hint;maxPoints;constructor(e){Object.assign(this,e)}}var a;t.ProblemTestCase=n,t.CodeReviewTestCase=class extends n{newFileCommentLine;constructor(e){super(e),Object.assign(this,e)}},t.EvaluatedTestCase=class extends n{actualPoints=0;solved=!1;verdictHint="";constructor(e){super(e)}},t.ProblemConfiguration=class{inputType=a.GitRepo;ideEnabled=!1},function(e){e[e.GitRepo=0]="GitRepo",e[e.Url=1]="Url",e[e.CodeReview=2]="CodeReview"}(a=t.ProblemInputType||(t.ProblemInputType={})),t.ProblemOpenedMetadata=class{databag};class s{opened;databag;instructions;static OK;static{this.OK=new s,this.OK.opened=!0}constructor(){this.opened=!1,this.databag=new Map}}t.ProblemOpenedResult=s,t.ProblemPrerequisitesResult=class{opened;message;constructor(e,t=null){this.opened=e,this.message=t}}}},t={};function n(a){var s=t[a];if(void 0!==s)return s.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,n),i.exports}var a={};(()=>{var e=a;Object.defineProperty(e,"__esModule",{value:!0}),e.Validator=void 0;const t=n(679);e.Validator=class{githubPlugin;unzipPlugin;logger;gitServer;storagePlugin;devopsClient;constructor(e,t,n,a,s,i){this.githubPlugin=e,this.unzipPlugin=t,this.logger=n,this.gitServer=a,this.storagePlugin=s,this.devopsClient=i}async getTestCases(){return Promise.resolve([new t.CodeReviewTestCase({id:"SELLING_SOLD_PLANTS",description:"The new plant selling endpoint does not consider what happens when we try to sell a plant we have already sold.",maxPoints:100,newFileCommentLine:-1})])}async prerequesites(e){return Promise.resolve(new t.ProblemPrerequisitesResult(!0))}async getProblemStatement(e){return Promise.resolve("{diff}")}async getProblemConfiguration(){let e=new t.ProblemConfiguration;return e.inputType=t.ProblemInputType.CodeReview,Promise.resolve(e)}async openProblem(e){let n=new t.ProblemOpenedResult;return n.databag.set("diff",'\n\n--- a/school_crud.py\n+++ b/school_crud.py\n@@ -1,7 +1,107 @@\n import json\n \n class SchoolCRUD:\n+    def validate_input(self, data):\n+        """Validates the input data for the API\n+\n+        Args:\n+            data (dict): The data to validate\n+\n+        Returns:\n+            bool: True if the data is valid, False otherwise\n+        """\n+        # Validate the data is a dict\n+        if not isinstance(data, dict):\n+            return False\n+\n+        # Validate the required fields\n+        required_fields = ["name", "address", "phone"]\n+        for field in required_fields:\n+            if field not in data:\n+                return False\n+\n+        # Validate the name is a string\n+        if not isinstance(data["name"], str):\n+            return False\n+\n+        # Validate the address is a string\n+        if not isinstance(data["address"], str):\n+            return False\n+\n+        # Validate the phone is a string\n+        if not isinstance(data["phone"], str):\n+            return False\n+\n+        # Validate the phone is a valid phone number\n+        if not re.match(r"^\\d{3}-\\d{3}-\\d{4}$", data["phone"]):\n+            return False\n+\n+        # Validate the optional fields\n+        optional_fields = ["website", "principal"]\n+        for field in optional_fields:\n+            if field in data:\n+                # Validate the website is a string\n+                if field == "website" and not isinstance(data["website"], str):\n+                    return False\n+\n+                # Validate the principal is a string\n+                if field == "principal" and not isinstance(data["principal"], str):\n+                    return False\n+\n+        # If all the checks pass, the data is valid\n+        return True\n+\n     def create(self, data):\n         """Creates a new school\n\n@@ -10,6 +110,7 @@ class SchoolCRUD:\n             return False\n \n         # Validate the data\n+        if not self.validate_input(data):\n             return False\n \n         # Create the school'),n.databag.set("repoUrl","https://github.com/cara-devmatch/Greenhouse-Code.git"),n.opened=!0,n.databag.set("date",(new Date).getTime().toString()),Promise.resolve(n)}async validate(e,t,n,a,s){for(let e of n)e.actualPoints=e.maxPoints,e.hint="here is a hint from the problem for case "+e.id,e.solved=!0;return Promise.resolve(n)}}})(),mylib=a})();
//# sourceMappingURL=main-bundle.js.map