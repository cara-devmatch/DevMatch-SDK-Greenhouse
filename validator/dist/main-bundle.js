var mylib;(()=>{"use strict";var e={679:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ProblemPrerequisitesResult=t.ProblemOpenedResult=t.ProblemOpenedMetadata=t.ProblemInputType=t.ProblemConfiguration=t.EvaluatedTestCase=t.ProblemTestCase=t.User=void 0,t.User=class{id;name;role;email;github;last_login;last_login_pretty};class s{id;description;hint;maxPoints;constructor(e){Object.assign(this,e)}}var r;t.ProblemTestCase=s,t.EvaluatedTestCase=class extends s{actualPoints=0;solved=!1;verdictHint="";constructor(e){super(e)}},t.ProblemConfiguration=class{inputType=r.GitRepo;ideEnabled=!1},function(e){e[e.GitRepo=0]="GitRepo",e[e.Url=1]="Url"}(r=t.ProblemInputType||(t.ProblemInputType={})),t.ProblemOpenedMetadata=class{databag};class o{opened;databag;instructions;static OK;static{this.OK=new o,this.OK.opened=!0}constructor(){this.opened=!1,this.databag=new Map}}t.ProblemOpenedResult=o,t.ProblemPrerequisitesResult=class{opened;message;constructor(e,t=null){this.opened=e,this.message=t}}}},t={};function s(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,s),i.exports}var r={};(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.Validator=void 0;const t=s(679);e.Validator=class{githubPlugin;unzipPlugin;logger;gitServer;storagePlugin;devopsClient;constructor(e,t,s,r,o,i){this.githubPlugin=e,this.unzipPlugin=t,this.logger=s,this.gitServer=r,this.storagePlugin=o,this.devopsClient=i}async getTestCases(){return Promise.resolve([new t.ProblemTestCase({id:"TEST_1",description:"Add two integers",maxPoints:10}),new t.ProblemTestCase({id:"TEST_2",description:"Bad arguments - Too few",maxPoints:10}),new t.ProblemTestCase({id:"TEST_3",description:"Bad arguments - Too many",maxPoints:80})])}async prerequesites(e){return Promise.resolve(new t.ProblemPrerequisitesResult(!0))}async getProblemStatement(e){return Promise.resolve("The contents of the problem are here!")}async getProblemConfiguration(){let e=new t.ProblemConfiguration;return e.ideEnabled=!0,e.inputType=t.ProblemInputType.GitRepo,Promise.resolve(e)}async openProblem(e){let s=new t.ProblemOpenedResult;return s.opened=!0,s.databag.set("date",(new Date).getTime().toString()),s.instructions="These are instructions.",Promise.resolve(s)}async validate(e,t,s,r,o){for(let e of s)e.actualPoints=e.maxPoints,e.hint="here is a hint from the problem for case "+e.id,e.solved=!0;return Promise.resolve(s)}}})(),mylib=r})();
//# sourceMappingURL=main-bundle.js.map